static class InstanceIdAlloc {
	static field id = 0;
}

static class PyHelper {

	static function strImpl(value) {
		
		switch (value[0]) {
			case PyType.INTEGER:
			case PyType.FLOAT:
				return '' + value[1];
				
			case PyType.STRING:
				return value[1];
			
			case PyType.LIST:
				sb = ['['];
				// TODO: infinite recursion check
				list = value[1];
				for (i = 0; i < list.length; ++i) {
					if (i > 0) sb.add(', ');
					sb.add(PyHelper.strImpl(list[i]));
				}
				sb.add(']');
				return sb.join('');
				
			default: throw new NotImplementedException();
		}
	}

	static field str = [PyType.FUNCTION, (value) => {
		if (value[0] == PyType.STRING) return value;
		return PyGlobals.getString(PyHelper.strImpl(value));
	}];
	
	static field range = [PyType.FUNCTION, (a) => {
		// TODO: no default arg values for lambdas in Crayon? seriously?
		b = null;
		c = null;
		
		if (c == null) {
			if (b == null) {
				if (a[0] != PyType.INTEGER) throw new Exception("range() requires an integer.");
				t = a[1];
				if (t <= 1000) {
					return [PyType.LIST, PyGlobals.INTS[:t]];
				}
				output = [];
				for (i = 0; i < t; ++i) {
					output.add(i <= 1000 ? PyGlobals.INTS[i] : [PyType.INTEGER, i]);
				}
				return [PyType.LIST, output];
			} else {
				throw new NotImplementedException();
			}
		} else {
			throw new NotImplementedException();
		}
	}];
	
	static field print = [PyType.FUNCTION, (value) => {
		Core.print(PyHelper.strImpl(value));
	}];
}

function PyAdd(a, b) {
	switch (a[0] * PyType.MAX + b[0]) {
		case PyType.INTEGER * PyType.MAX + PyType.INTEGER:
			n = a[1] + b[1];
			if (n > 1000 || n < -1000) return [PyType.INTEGER, n];
			return PyGlobals.INTS[n];
			
		case PyType.INTEGER * PyType.MAX + PyType.FLOAT:
		case PyType.FLOAT * PyType.MAX + PyType.INTEGER:
		case PyType.FLOAT * PyType.MAX + PyType.FLOAT:
			return [PyType.FLOAT, a[1] + b[1]];
		
		default:
			if (a[0] == PyType.STRING || b[0] == PyType.STRING) {
				left = PyHelper.strImpl(a);
				right = PyHelper.strImpl(b);
				if (left.length == 0) return PyGlobals.getString(right);
				if (right.length == 0) return PyGlobals.getString(left);
				return [PyType.STRING, left + right];
			}
			throw new NotImplementedException("PyAdd for types: " + a[0] + ' and ' + b[0] + '.');
	}
}

function PyMult(a, b) {
	switch (a[0] * PyType.MAX + b[0]) {
		
		case PyType.INTEGER * PyType.MAX + PyType.INTEGER:
			n = a[1] * b[1];
			if (n > 1000 || n < -1000) return [PyType.INTEGER, n];
			return PyGlobals.INTS[n];
			
		case PyType.INTEGER * PyType.MAX + PyType.FLOAT:
		case PyType.FLOAT * PyType.MAX + PyType.INTEGER:
		case PyType.FLOAT * PyType.MAX + PyType.FLOAT:
			return [PyType.FLOAT, a[1] * b[1]];
		
		case PyType.INTEGER * PyType.MAX + PyType.STRING:
		case PyType.STRING * PyType.MAX + PyType.INTEGER:
			return PyGlobals.getString(a[1] * b[1]);
		
		default:
			throw new NotImplementedException("PyMult for types: " + a[0] + ' and ' + b[0] + '.');
	}
}

function PyDot(root, fieldName) {
	switch (root[0]) {
		case PyType.MODULE:
			value = root[1].get(fieldName);
			if (value == null) throw new Exception("module doesn't have member: '" + fieldName + "'");
			return value;
		
		case PyType.CLASS:
			value = root[3].get(fieldName);
			if (value == null) {
				bClass = root[2];
				while (bClass != null) {
					value = bClass[3].get(fieldName);
					if (value != null) return value;
					bClass = bClass[2];
				}
				throw new Exception("No field named '" + fieldName + "'");
			}
			return value;
		
		case PyType.INSTANCE:
			value = root[2].get(fieldName);
			if (value == null) {
				value = root[1][3].get(fieldName); // PERF HACK: could call PyDot on root[1] without doing this check, but inlining this will catch most cases without incuring a time penalty of recursing.
				if (value == null) {
					return PyDot(root[1], fieldName);
				}
			}
			return value;
			
		default:
			throw new NotImplementedException();
	}
}

function PyLT(a, b) {
	switch (a[0] * PyType.MAX + b[0]) {
		case PyType.INTEGER * PyType.MAX + PyType.INTEGER:
		case PyType.INTEGER * PyType.MAX + PyType.FLOAT:
		case PyType.FLOAT * PyType.MAX + PyType.INTEGER:
		case PyType.FLOAT * PyType.MAX + PyType.FLOAT:
			return a[1] < b[1] ? PyGlobals.TRUE : PyGlobals.FALSE;
	}
	throw new NotImplementedException();
}

function PyLTEQ(a, b) {
	switch (a[0] * PyType.MAX + b[0]) {
		case PyType.INTEGER * PyType.MAX + PyType.INTEGER:
		case PyType.INTEGER * PyType.MAX + PyType.FLOAT:
		case PyType.FLOAT * PyType.MAX + PyType.INTEGER:
		case PyType.FLOAT * PyType.MAX + PyType.FLOAT:
			return a[1] <= b[1] ? PyGlobals.TRUE : PyGlobals.FALSE;
	}
	throw new NotImplementedException();
}

function PyGT(a, b) {
	switch (a[0] * PyType.MAX + b[0]) {
		case PyType.INTEGER * PyType.MAX + PyType.INTEGER:
		case PyType.INTEGER * PyType.MAX + PyType.FLOAT:
		case PyType.FLOAT * PyType.MAX + PyType.INTEGER:
		case PyType.FLOAT * PyType.MAX + PyType.FLOAT:
			return a[1] > b[1] ? PyGlobals.TRUE : PyGlobals.FALSE;
	}
	throw new NotImplementedException();
}

function PyGTEQ(a, b) {
	switch (a[0] * PyType.MAX + b[0]) {
		case PyType.INTEGER * PyType.MAX + PyType.INTEGER:
		case PyType.INTEGER * PyType.MAX + PyType.FLOAT:
		case PyType.FLOAT * PyType.MAX + PyType.INTEGER:
		case PyType.FLOAT * PyType.MAX + PyType.FLOAT:
			return a[1] >= b[1] ? PyGlobals.TRUE : PyGlobals.FALSE;
	}
	throw new NotImplementedException();
}

function PyEnsureIterable(value) {
	switch (value[0]) {
		case PyType.STRING:
		case PyType.LIST:
			return value[1];
		
		default:
			throw new Exception("For loops can only iterate over iterable collections like lists and strings.");
	}
}

function PyTruthyCheck(value) {
	switch (value[0]) {
		case PyType.BOOLEAN:
			return value[1];
		case PyType.INTEGER:
			if (value[1] == 0) return PyGlobals.FALSE;
			return PyGlobals.TRUE;
		default:
			throw new NotImplementedException("Truthy check not implemented for type.");
	}
}

function PyDictMaker(keyValuesAlternating) {
	output = [PyType.DICTIONARY, 0, {}, {}, {}];
	for (i = 0; i < keyValuesAlternating.length; i += 2) {
		key = keyValuesAlternating[i];
		value = keyValuesAlternating[i + 1];
		switch (key[0]) {
			case PyType.INTEGER:
				output[2][key[1]] = value;
				break;
			case PyType.STRING:
				output[3][key[1]] = value;
				break;
			
			default:
				throw new NotImplementedException("Type not supported as key...yet.");
		}
	}
	
	output[1] = output[2].length + output[3].length + output[4].length;
	
	return output;
}

function PyIndex(root, index) {
	switch (root[0]) {
		case PyType.LIST:
			list = root[1];
			len = list[1].length;
			if (root[0] != PyType.INTEGER) throw new Exception("Tried to use a non-integer as an index into a list");
			i = index[1];
			if (i >= len || i < -len) throw new Exception("Index out of range");
			return list[i];
		
		case PyType.DICTIONARY:
			output = null;
			switch (index[0]) {
				case PyType.INTEGER:
					output = root[2].get(index[1]);
					break;
				case PyType.STRING:
					output = root[3].get(index[1]);
					break;
				default:
					throw new NotImplementedException("Keying off a dictionar with this type not supported yet.");
			}
			if (output == null) throw new Exception("Dictionary key not found.");
			return output;
		
		default:
			throw new NotImplementedException("Indexing into this type not supported yet.");
	}
}

function PyFuncInvoke(func, args) {
	// TODO: add min and max arg count and default values to the function definition value.
	switch (func[0]) {
		case PyType.CLASS:
			mems = func[3];
			constructor_ = mems.get('__init__');
			inst = [PyType.INSTANCE, func, {}, ++InstanceIdAlloc.id];
			if (constructor_ == null) {
				if (args.length > 0) throw new Exception("No args expected but " + args.length + " found.");
				return inst;
			}
			
			// Since constructor_ is a regular function, recurse with that. Ignore the return value.
			PyFuncInvoke(constructor_, [inst] + args);
			return inst;
			
		case PyType.FUNCTION:
			// TODO: verify args length
			switch (args.length) {
				// Laugh it up, but this is a smidge faster for every function call
				case 0: return func[1]();
				case 1: return func[1](args[0]);
				case 2: return func[1](args[0], args[1]);
				case 3: return func[1](args[0], args[1], args[2]);
				case 4: return func[1](args[0], args[1], args[2], args[3]);
				case 5: return func[1](args[0], args[1], args[2], args[3], args[4]);
				case 6: return func[1](args[0], args[1], args[2], args[3], args[4], args[5]);
				case 7: return func[1](args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				case 8: return func[1](args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
				case 9: return func[1](args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
				case 10: return func[1](args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
				default:
					return func[1].invoke(args);
			}
		default:
			throw new NotImplementedException();
	}
}

function PyAssignDotField(value, root, fieldName, opFunc) {

	if (opFunc != null) {
		oldValue = null;
		switch (root[0]) {
			case PyType.INSTANCE:
				oldValue = root[2].get(fieldName);
				if (oldValue == null) {
					oldValue = root[1][3].get(fieldName);
					if (oldValue == null) {
						throw new Exception("Instance has no field named '" + fieldName + "'");
					}
				}
				
				break;
			
			default:
				throw new NotImplementedException();
		}
		value = opFunc(oldValue, value);
	}

	switch (root[0]) {
		case PyType.INSTANCE:
			root[2][fieldName] = value;
			break;
			
		case PyType.CLASS:
			root[3][fieldName] = value;
			break;
			
		default:
			throw new NotImplementedException();
	}

}

function PyEnsureClass(cls) {
	if (cls != null && cls[0] != PyType.CLASS) throw new Exception("Non-class expression used as a base class");
	return cls;
}
